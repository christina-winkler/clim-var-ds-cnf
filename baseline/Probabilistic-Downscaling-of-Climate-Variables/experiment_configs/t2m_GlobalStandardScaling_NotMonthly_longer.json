{
    "name": "t2m_GlobalSS_NotMonthly_Longer",
    "phase": "train",
    "gpu_ids": [0],
    "path": {
        "log": "logs",
        "tb_logger": "tb_logger",
        "results": "results",
        "checkpoint": "checkpoint",
        "resume_state": null
    },
    "data": {
        "name": "WeatherBench",
        "dataroot": "/mnt/data/papikyan/WeatherBench/numpy",
        "batch_size": 16,
        "num_workers": 4,
        "use_shuffle": true,
        "train_min_date": "1979-01-01-00",
        "train_max_date": "2016-01-01-00",
        "train_subset_min_date": "2014-01-01-00",
        "train_subset_max_date": "2016-01-01-00",
        "transformation": "GlobalStandardScaling",
        "apply_tranform_monthly": false,
        "val_min_date": "2016-01-01-00",
        "val_max_date": "2018-01-01-00",
        "variables": ["t2m"],
        "height": 128
    },
    "model": {
        "finetune_norm": false,
        "unet": {
            "in_channel": 2,  // This should be equal to the number of variables * 2. Used in only networks.py 121 line.
            "out_channel": 1, // This should be equal to the number of variables.
            "inner_channel": 64,
            "norm_groups": 32,  // 16
            "channel_multiplier": [1, 2, 4, 8],
            "attn_res": [16],  // Possible values are 128, 64, 32, 16 and depends on channel_multipliers.
            "res_blocks": 1,
            "dropout": 0.7,
            "init_method": "kaiming"
        },
        "beta_schedule": {
            "train": {
                "schedule": "cosine",
                "n_timestep": 2000,
                "linear_start": 1e-6,
                "linear_end": 1e-2
            },
            "val": {
                "schedule": "cosine",
                "n_timestep": 100,
                "linear_start": 1e-6,
                "linear_end": 1e-2
            },
            "test": {
                "schedule": "cosine",
                "n_timestep": 2000,
                "linear_start": 1e-6,
                "linear_end": 1e-2
            }
        },
        "diffusion": {
            "conditional": true,
            "loss": "l2"
        }
    },
    "training": {
        "epoch_n_iter": 200000,
        "val_freq": 40000,
        "save_checkpoint_freq": 40000,
        "print_freq": 200,
        "n_val_vis": 1,
        "val_vis_freq": 500,
        "sample_size": 10,
        "optimizer": {
            "type": "adam",  // Possible types are ['adam', 'adamw']
            "amsgrad": false,
            "lr": 5e-5
        }
    }
}